import streamlit as st
import requests

API_BASE = "http://127.0.0.1:5000"  # backend c·ªßa b·∫°n

st.title("Admin Dashboard - B·ªánh Vi·ªán")

# -----------------------------
# ‚úÖ Ph·ª•c h·ªìi cookies n·∫øu session_state m·∫•t
# -----------------------------
if "cookies" not in st.session_state:
    if "session" in st.query_params:
        st.session_state["cookies"] = {"session": st.query_params["session"]}
    else:
        st.session_state["cookies"] = None

if not st.session_state["cookies"]:
    st.warning("‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc.")
    st.switch_page("pages/1_login.py")
    st.stop()
session_token = st.session_state["cookies"].get("session", "")
# -------------------- Tabs --------------------
tab1, tab2 = st.tabs(["Qu·∫£n L√Ω B√°c Sƒ©", "Qu·∫£n L√Ω L·ªãch Tr·ª±c"])

# -------------------- Tab 1: Qu·∫£n L√Ω B√°c Sƒ© --------------------
with tab1:
    st.header("Danh S√°ch B√°c Sƒ©")

    try:
        res = requests.get(f"{API_BASE}/api/doctors/")
        doctors = res.json()
    except:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!")
        doctors = []

    for doc in doctors:
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"{doc['full_name']} - ID: {doc['doctor_id']} - Chuy√™n khoa: {doc.get('specialization', '')}")
        with col2:
            if st.button(f"Xo√°", key=f"del_doc_{doc['doctor_id']}"):
                try:
                    del_res = requests.delete(f"{API_BASE}/api/doctors/{doc['doctor_id']}")

                    # X·ª≠ l√Ω an to√†n
                    msg = ""
                    try:
                        # N·∫øu backend tr·∫£ JSON
                        msg = del_res.json().get('message', '')
                    except ValueError:
                        # N·∫øu backend tr·∫£ text r·ªóng ho·∫∑c HTML
                        msg = del_res.text.strip()

                    if del_res.status_code == 200:
                        st.success(f"ƒê√£ xo√° b√°c sƒ© {doc['full_name']} - {msg}")
                        st.experimental_rerun()
                    elif del_res.status_code == 404:
                        st.error(f"B√°c sƒ© kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã xo√°. {msg}")
                    else:
                        st.error(f"Xo√° th·∫•t b·∫°i (status {del_res.status_code}): {msg or 'Kh√¥ng c√≥ th√¥ng tin'}")
                except Exception as e:
                    st.error(f"L·ªói khi xo√°: {str(e)}")

    st.subheader("Th√™m B√°c sƒ© M·ªõi")

    with st.form("add_doctor_form"):
        full_name = st.text_input("H·ªç v√† t√™n *")
        gender = st.selectbox("Gi·ªõi t√≠nh *", ["Nam", "N·ªØ", "Kh√°c"])
        specialization = st.text_input("Chuy√™n khoa *")
        email = st.text_input("Email")
        phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i")

        st.markdown("---")
        st.subheader("T√†i kho·∫£n ƒëƒÉng nh·∫≠p")
        username = st.text_input("T√™n ƒëƒÉng nh·∫≠p *")
        password = st.text_input("M·∫≠t kh·∫©u *", type="password")

        submitted = st.form_submit_button("T·∫°o t√†i kho·∫£n & h·ªì s∆° b√°c sƒ©")

    if submitted:
        if not all([full_name, gender, specialization, username, password]):
            st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc (*)")
        else:
            data = {
                "username": username,
                "password": password,
                "full_name": full_name,
                "gender": gender,
                "specialization": specialization,
                "email": email,
                "phone": phone
            }

            try:
                res = requests.post(
                    f"{API_BASE}/api/admin/create_doctor",
                    json=data,
                    cookies={"session": session_token}
                )
                if res.status_code == 201:
                    info = res.json()
                    st.success(f"‚úÖ {info['message']} (B√°c sƒ© ID: {info['doctor_id']}, User ID: {info['user_id']})")
                    st.experimental_rerun()
                elif res.status_code == 409:
                    st.warning(res.json().get("message", "T√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i"))
                else:
                    st.error(f"‚ö†Ô∏è L·ªói: {res.text}")
            except Exception as e:
                st.error(f"üö® Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server: {e}")

# -------------------- Tab 2: Qu·∫£n L√Ω L·ªãch Tr·ª±c --------------------
with tab2:
    st.header("Danh s√°ch ca tr·ª±c")

    doctor_filter = st.number_input("L·ªçc theo ID b√°c sƒ© (0 = t·∫•t c·∫£)", min_value=0, step=1)
    params = {}
    if doctor_filter != 0:
        params['doctor_id'] = doctor_filter

    try:
        res = requests.get(f"{API_BASE}/api/shifts/", params=params)
        if res.status_code == 200:
            shifts = res.json()
            if shifts:
                for s in shifts:
                    col1, col2 = st.columns([4, 1])
                    with col1:
                        st.write(f"ID ca tr·ª±c: {s['shift_id']}, ID B√°c sƒ©: {s['doctor_id']}, "
                                 f"Ng√†y: {s['shift_date']}, {s['start_time']} ‚Äì {s['end_time']}, "
                                 f"Ph√≤ng: {s.get('room', '')}")
                    with col2:
                        if st.button("X√≥a", key=f"del_shift_{s['shift_id']}"):
                            try:
                                del_res = requests.delete(
                                    f"{API_BASE}/api/shifts/{s['shift_id']}",
                                    cookies={"session": session_token}
                                )
                                if del_res.status_code == 200:
                                    st.success(f"ƒê√£ x√≥a ca tr·ª±c ID {s['shift_id']}")
                                    st.experimental_rerun()  # reload l·∫°i danh s√°ch
                                else:
                                    msg = ""
                                    try:
                                        msg = del_res.json().get("message", "")
                                    except ValueError:
                                        msg = del_res.text
                                    st.error(f"X√≥a th·∫•t b·∫°i: {msg}")
                            except Exception as e:
                                st.error(f"L·ªói khi x√≥a ca tr·ª±c: {e}")
            else:
                st.info("Ch∆∞a c√≥ ca tr·ª±c n√†o.")
        else:
            st.error("L·ªói khi l·∫•y d·ªØ li·ªáu ca tr·ª±c")
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server: {e}")

    #th√™m ca tr·ª±c
    st.header("Th√™m ca tr·ª±c m·ªõi")

    with st.form("create_shift_form"):
        doctor_id = st.number_input("ID b√°c sƒ©", min_value=1, step=1)
        shift_date = st.date_input("Ng√†y tr·ª±c")
        start_time = st.time_input("Gi·ªù b·∫Øt ƒë·∫ßu")
        end_time = st.time_input("Gi·ªù k·∫øt th√∫c")
        room = st.text_input("Ph√≤ng tr·ª±c (t√πy ch·ªçn)")

        submitted = st.form_submit_button("T·∫°o ca tr·ª±c")
        if submitted:
            payload = {
                "doctor_id": doctor_id,
                "shift_date": shift_date.isoformat(),
                "start_time": start_time.strftime("%H:%M:%S"),
                "end_time": end_time.strftime("%H:%M:%S"),
                "room": room if room else None
            }
            # G·ª≠i POST request ƒë·∫øn Flask
            try:
                res = requests.post(
                    f"{API_BASE}/api/shifts",
                    json=payload,
                    cookies={"session": session_token}
                )
                if res.status_code == 201:
                    st.success("‚úÖ T·∫°o ca tr·ª±c th√†nh c√¥ng!")
                else:
                    st.error(f"‚ùå L·ªói: {response.json().get('message')}")
            except Exception as e:
                st.error(f"‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server: {e}")
